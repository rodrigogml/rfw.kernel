package br.eng.rodrigogml.rfw.kernel.utils;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertThrows;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

import br.eng.rodrigogml.rfw.kernel.exceptions.RFWException;
import br.eng.rodrigogml.rfw.kernel.exceptions.RFWValidationException;

/**
 * Classe de testes para {@link RUDocVal}. Testa exaustivamente o método {@link RUDocVal#calcDVDANFeV400(String)} com diversas entradas válidas e inválidas.
 *
 * @author Rodrigo GML
 * @since 1.0.0 (9 de fev. de 2025)
 * @version 1.0.0 - Rodrigo GML
 */
@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RUDVCalcTest {

  @Test
  public void t00_testValidDANFEKeys() throws RFWException {
    // Entradas de exemplo com seus respectivos dígitos verificadores corretos
    String[][] testCases = {
        { "3524086079597800020855001000892559127772513", "0" },
        { "3524080166029600013055002000168411155000908", "2" },
        { "3524084909239800039455004008433570117178097", "0" },
        { "3524086118688800990555002018412443100772421", "7" },
        { "3524086118688800990555002018412445102009123", "5" },
        { "3524086118688800990555002018412444104721802", "6" },
        { "3524080115260500016055001000012401188564027", "2" },
        { "3524084699228500019555001000001077194345007", "0" },
        { "3524080120000900010955001000181411100162138", "7" },
        { "3524080941986000013955000000192570150075291", "4" },
        { "3524080632154900016455001000260087100199457", "8" },
        { "3524084854151000044555055003640412104677406", "8" },
        { "3524082715273100010955001000239087112104524", "0" },
        { "3524084699228500019555001000001076191345177", "1" },
        { "3524080740814500017555001000089762194624258", "4" },
        { "3524081749579900013755001000173503100383999", "5" },
        { "3524081749579900013755001000173453100367757", "6" },
        { "3524080183872303259255003014919479137456497", "2" },
        { "3524086118688800990555002018393676104722060", "3" },
        { "3524084699228500019555001000001075102308903", "6" },
        { "3524080183872303259255003014919477109987035", "0" },
        { "3524086118688800990555002018393675109834991", "6" },
        { "3524086118688800990555002018393674101487197", "0" },
        { "3524086118688800990555002018393672109903091", "1" },
        { "3524086118688800990555002018393673107914318", "1" },
        { "3524080315179000044755001001022563156644223", "9" },
        { "3124080528999200013255001000021513141316835", "0" },
        { "3524084259782300086255001000912789107344121", "1" },
        { "3524088304401600543555001001329247119527218", "1" },
        { "3524086118688800990555002018358606101229265", "2" },
        { "3524083156510400483055166000005811135791366", "7" },
        { "3524084854151000044555055003634223122243140", "4" },
        { "3524081057366000011555001000337149100434301", "3" },
        { "3524080752655700800355040000372068131953403", "8" },
        { "3524088331044100755355001002941422134424908", "4" },
        { "3524083540275900565955880000004077104885061", "2" },
        { "3524080632154900016455001000259899100199272", "0" },
        { "3524081037723800019455001000005283160821498", "3" },
        { "3524085380513100010255001000587113176536930", "1" },
        { "3524086118688800990555002018378698109578617", "7" },
        { "3524086118688800990555002018378700100522525", "1" },
        { "3524086118688800990555002018378701106453985", "0" },
        { "3524086833190900016655001000025378110025378", "4" },
        { "3524086833190900016655001000025376110025376", "3" },
        { "3524086833190900016655001000025375110025375", "8" },
        { "3524086118688800990555002018365086100258150", "1" },
        { "3524084604109100010455004000131591175966493", "0" },
        { "3524081384791000074155001000238172178581692", "0" },
        { "3524075380513100010255001000585612132605649", "7" },
        { "3524086887805700012155003001970274177998975", "5" }
    };

    for (String[] testCase : testCases) {
      String accessKey = testCase[0];
      String expectedDV = testCase[1];
      assertEquals("Erro ao calcular o DV para a chave: " + accessKey, expectedDV, RUDocVal.calcDVDANFeV400(accessKey));
    }
  }

  @Test
  public void t01_testInvalidDANFEKeys() {
    String[] invalidInputs = {
        null, // Nulo
        "", // String vazia
        "12345678901234567890", // Muito curta
        "ABCDEFGHIJKLMNO1234567890123456789012345", // Contém letras
        "1234567890123456789012345678901234567890A", // Último caractere inválido
        "123456789012345678901234567890123456789012345", // Muito longa
        "    12345678901234567890123456789012345678901", // Espaços no início
        "12345678901234567890123456789012345678901    ", // Espaços no final
        "12-345678901234567890123456789012345678901" // Contém caracteres especiais
    };

    for (String invalid : invalidInputs) {
      assertThrows("Entrada inválida deveria lançar exceção: " + invalid,
          RFWValidationException.class, () -> RUDocVal.calcDVDANFeV400(invalid));
    }
  }

}
