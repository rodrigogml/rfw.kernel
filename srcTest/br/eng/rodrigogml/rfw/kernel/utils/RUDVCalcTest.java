package br.eng.rodrigogml.rfw.kernel.utils;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertThrows;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

import br.eng.rodrigogml.rfw.kernel.exceptions.RFWException;
import br.eng.rodrigogml.rfw.kernel.exceptions.RFWValidationException;

/**
 * Classe de testes para {@link RUDVCalc}. Testa exaustivamente o método {@link RUDVCalc#calcDVDANFeV400(String)} com diversas entradas válidas e inválidas.
 *
 * @author Rodrigo GML
 * @since 1.0.0 (9 de fev. de 2025)
 * @version 1.0.0 - Rodrigo GML
 */
@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RUDVCalcTest {

  @Test
  public void t00_testValidDANFEKeys() throws RFWException {
    // Entradas de exemplo com seus respectivos dígitos verificadores corretos
    String[][] testCases = {
        { "3524086079597800020855001000892559127772513", "0" },
        { "3524080166029600013055002000168411155000908", "2" },
        { "3524084909239800039455004008433570117178097", "0" },
        { "3524086118688800990555002018412443100772421", "7" },
        { "3524086118688800990555002018412445102009123", "5" },
        { "3524086118688800990555002018412444104721802", "6" },
        { "3524080115260500016055001000012401188564027", "2" },
        { "3524084699228500019555001000001077194345007", "0" },
        { "3524080120000900010955001000181411100162138", "7" },
        { "3524080941986000013955000000192570150075291", "4" },
        { "3524080632154900016455001000260087100199457", "8" },
        { "3524084854151000044555055003640412104677406", "8" },
        { "3524082715273100010955001000239087112104524", "0" },
        { "3524084699228500019555001000001076191345177", "1" },
        { "3524080740814500017555001000089762194624258", "4" },
        { "3524081749579900013755001000173503100383999", "5" },
        { "3524081749579900013755001000173453100367757", "6" },
        { "3524080183872303259255003014919479137456497", "2" },
        { "3524086118688800990555002018393676104722060", "3" },
        { "3524084699228500019555001000001075102308903", "6" },
        { "3524080183872303259255003014919477109987035", "0" },
        { "3524086118688800990555002018393675109834991", "6" },
        { "3524086118688800990555002018393674101487197", "0" },
        { "3524086118688800990555002018393672109903091", "1" },
        { "3524086118688800990555002018393673107914318", "1" },
        { "3524080315179000044755001001022563156644223", "9" },
        { "3124080528999200013255001000021513141316835", "0" },
        { "3524084259782300086255001000912789107344121", "1" },
        { "3524088304401600543555001001329247119527218", "1" },
        { "3524086118688800990555002018358606101229265", "2" },
        { "3524083156510400483055166000005811135791366", "7" },
        { "3524084854151000044555055003634223122243140", "4" },
        { "3524081057366000011555001000337149100434301", "3" },
        { "3524080752655700800355040000372068131953403", "8" },
        { "3524088331044100755355001002941422134424908", "4" },
        { "3524083540275900565955880000004077104885061", "2" },
        { "3524080632154900016455001000259899100199272", "0" },
        { "3524081037723800019455001000005283160821498", "3" },
        { "3524085380513100010255001000587113176536930", "1" },
        { "3524086118688800990555002018378698109578617", "7" },
        { "3524086118688800990555002018378700100522525", "1" },
        { "3524086118688800990555002018378701106453985", "0" },
        { "3524086833190900016655001000025378110025378", "4" },
        { "3524086833190900016655001000025376110025376", "3" },
        { "3524086833190900016655001000025375110025375", "8" },
        { "3524086118688800990555002018365086100258150", "1" },
        { "3524084604109100010455004000131591175966493", "0" },
        { "3524081384791000074155001000238172178581692", "0" },
        { "3524075380513100010255001000585612132605649", "7" },
        { "3524086887805700012155003001970274177998975", "5" }
    };

    for (String[] testCase : testCases) {
      String accessKey = testCase[0];
      String expectedDV = testCase[1];
      assertEquals("Erro ao calcular o DV para a chave: " + accessKey, expectedDV, RUDVCalc.calcDVDANFeV400(accessKey));
    }
  }

  @Test
  public void t01_testInvalidDANFEKeys() {
    String[] invalidInputs = {
        null, // Nulo
        "", // String vazia
        "12345678901234567890", // Muito curta
        "ABCDEFGHIJKLMNO1234567890123456789012345", // Contém letras
        "1234567890123456789012345678901234567890A", // Último caractere inválido
        "123456789012345678901234567890123456789012345", // Muito longa
        "    12345678901234567890123456789012345678901", // Espaços no início
        "12345678901234567890123456789012345678901    ", // Espaços no final
        "12-345678901234567890123456789012345678901" // Contém caracteres especiais
    };

    for (String invalid : invalidInputs) {
      assertThrows("Entrada inválida deveria lançar exceção: " + invalid,
          RFWValidationException.class, () -> RUDVCalc.calcDVDANFeV400(invalid));
    }
  }

  @Test
  public void t02_testValidCNPJ() throws RFWException {
    // CNPJs válidos (sem pontos, barras e traços)
    String[][] testCases = {
        { "306988820001", "71" },
        { "000123290001", "72" },
        { "063215490001", "64" },
        { "029571040001", "14" },
        { "032591850001", "41" },
        { "000255030001", "11" },
        { "001379980001", "70" },
        { "002044470001", "82" },
        { "002263830001", "10" },
        { "002992920001", "05" },
        { "006874840001", "99" },
        { "007232950001", "24" },
        { "007384990002", "10" },
        { "007765740013", "90" },
        { "007765740015", "51" },
        { "008515670010", "62" },
        { "009751630001", "90" },
        { "011093640001", "77" },
        { "011526050001", "60" },
        { "011575550039", "87" },
        { "013341180001", "19" },
        { "013910630001", "89" },
        { "014387840004", "40" },
        { "014387840024", "93" },
        { "014431840001", "27" },
        { "014543340001", "06" },
        { "014905080001", "88" },
        { "015582550001", "37" },
        { "015972950001", "98" },
        { "016075180001", "50" },
        { "016572880001", "34" },
        { "018387230098", "50" },
        { "018387230325", "92" },
        { "020253340009", "00" },
        { "020668480001", "49" },
        { "020669520001", "33" },
        { "021395160001", "47" },
        { "021732240010", "11" },
        { "021954450004", "42" },
        { "023623130001", "15" },
        { "023645870003", "05" },
        { "025296840001", "49" },
        { "025381660001", "91" },
        { "025581570756", "85" },
        { "026703080001", "70" },
        { "027285790001", "39" },
        { "027610750001", "10" },
        { "028173290001", "75" },
        { "028661720001", "78" },
        { "029144600070", "82" },
        { "029144600191", "70" },
        { "029144600192", "50" },
        { "029144600200", "03" },
        { "029162650236", "15" },
        { "029571040015", "10" },
        { "031517900004", "47" },
        { "032171700001", "10" },
        { "032260040001", "80" },
        { "035817020003", "66" },
        { "036571230001", "98" },
        { "036914320001", "84" },
        { "037034460001", "70" },
        { "037469380001", "43" },
        { "038021080001", "96" },
        { "038516810001", "90" },
        { "039413590001", "51" },
        { "040419330005", "01" },
        { "040419330022", "02" },
        { "042229310001", "95" },
        { "043149310001", "15" },
        { "043366270001", "79" },
        { "043380540001", "12" },
        { "043580630001", "75" },
        { "045210950001", "40" },
        { "047255270001", "34" },
        { "047788950001", "40" },
        { "047876210001", "18" },
        { "048733540001", "00" },
        { "049098050001", "03" },
        { "049720920005", "56" },
        { "049720920017", "90" },
        { "050177800014", "10" },
        { "050614480001", "39" },
        { "050753020001", "42" },
        { "051020150001", "84" },
        { "052051070002", "70" },
        { "052156330001", "30" },
        { "052899920001", "32" },
        { "054076030001", "26" },
        { "054318330001", "20" },
        { "054936740001", "99" },
        { "055707140008", "25" },
        { "056076570001", "35" },
        { "056076570002", "16" },
        { "057358040001", "52" },
        { "057540670001", "35" },
        { "058270940008", "67" },
        { "058685740010", "90" },
        { "058978500001", "58" },
        { "060025320001", "44" }
    };

    for (String[] testCase : testCases) {
      String cnpjBase = testCase[0];
      String expectedDV = testCase[1];
      assertEquals("Erro ao calcular o DV do CNPJ: " + cnpjBase, expectedDV, RUDVCalc.calcDVCNPJ(cnpjBase));
    }
  }

  @Test
  public void t03_testInvalidCNPJ() {
    String[] invalidCNPJs = {
        null, // Nulo
        "", // Vazio
        "12345678000", // Muito curto
        "123456789012345", // Muito longo
        "abcdefghijklm", // Letras
        "12.345.678/0001-95", // Formato inválido
        "11111111000111", // CNPJ inválido
        "99999999000199", // CNPJ inválido
        "98765432000198" // CNPJ com DV errado
    };

    for (String invalid : invalidCNPJs) {
      assertThrows("CNPJ inválido deveria lançar exceção: " + invalid,
          RFWValidationException.class, () -> RUDVCalc.calcDVCNPJ(invalid));
    }
  }

  @Test
  public void t00_testValidCPF() throws RFWException {
    // CPFs válidos (sem pontos e traços)
    String[][] testCases = {
        { "451549488", "07" },
        { "271106498", "06" },
        { "281733528", "79" },
        { "172046478", "23" },
        { "130532618", "04" },
        { "892765904", "04" },
        { "345407926", "87" },
        { "016843898", "44" },
        { "289996498", "49" },
        { "154942658", "38" },
        { "819485658", "20" },
        { "963433978", "68" },
        { "119412528", "00" },
        { "139593148", "84" },
        { "134008678", "61" },
        { "295057888", "86" },
        { "096971458", "06" },
        { "017467678", "63" },
        { "213519038", "10" },
        { "715373926", "20" },
        { "045958998", "90" },
        { "439576929", "20" },
        { "102022048", "12" },
        { "130532618", "04" },
        { "051517718", "09" },
        { "137636388", "73" },
        { "724370498", "00" },
        { "003006608", "55" },
        { "584524436", "68" },
        { "134008678", "61" },
        { "533060901", "15" },
        { "862456000", "49" },
        { "329735268", "09" },
        { "049734118", "25" },
        { "138185928", "37" },
        { "222185248", "64" },
        { "051517718", "09" },
        { "068750328", "05" },
        { "621783779", "04" },
        { "621783779", "04" },
        { "134008678", "61" },
        { "096971458", "06" },
        { "439576929", "20" },
        { "040842098", "72" },
        { "263592838", "08" },
        { "130532618", "04" },
        { "391376538", "73" },
        { "102314274", "09" },
        { "041876328", "32" },
        { "024948568", "09" },
        { "510193450", "04" },
        { "068463988", "21" },
        { "213519038", "10" },
        { "095793664", "89" },
        { "045958998", "90" },
        { "392598778", "90" },
        { "134008678", "61" },
        { "290357098", "10" },
        { "079771569", "03" },
        { "295057888", "86" },
        { "051135498", "35" },
        { "064570338", "90" },
        { "260825738", "03" },
        { "439576929", "20" },
        { "089070768", "55" },
        { "130532618", "04" },
        { "138185928", "37" },
        { "134008678", "61" },
        { "172046738", "24" },
        { "584524436", "68" },
        { "015562168", "82" },
        { "137611828", "99" },
        { "718763408", "00" },
        { "004889628", "46" },
        { "308414228", "93" },
        { "155806868", "62" },
        { "439576929", "20" },
        { "025056838", "16" },
        { "045958998", "90" },
        { "295057888", "86" },
        { "292932148", "22" },
        { "778231178", "00" },
        { "137989558", "83" },
        { "410426818", "64" },
        { "138185928", "37" },
        { "423215238", "59" },
        { "068670616", "13" },
        { "434965168", "36" },
        { "439576929", "20" },
        { "130532618", "04" },
        { "344024598", "50" },
        { "102009166", "53" },
        { "134008678", "61" },
        { "439576929", "20" },
        { "172046738", "24" },
        { "155033008", "07" },
        { "102455328", "03" },
        { "023090768", "72" },
        { "063348728", "77" },
        { "168476808", "06" }
    };

    for (String[] testCase : testCases) {
      String cpfBase = testCase[0];
      String expectedDV = testCase[1];
      assertEquals("Erro ao calcular o DV do CPF: " + cpfBase, expectedDV, RUDVCalc.calcDVCPF(cpfBase));
    }
  }

  @Test
  public void t01_testInvalidCPF() {
    String[] invalidCPFs = {
        null, // Nulo
        "", // Vazio
        "12345678", // Muito curto
        "123456789012", // Muito longo
        "abcdefghijk", // Letras
        "123.456.789-09", // Formato inválido
        "11111111111", // CPF inválido
        "99999999999", // CPF inválido
        "98765432198" // CPF com DV errado
    };

    for (String invalid : invalidCPFs) {
      assertThrows("CPF inválido deveria lançar exceção: " + invalid, RFWValidationException.class, () -> RUDVCalc.calcDVCPF(invalid));
    }
  }

}
